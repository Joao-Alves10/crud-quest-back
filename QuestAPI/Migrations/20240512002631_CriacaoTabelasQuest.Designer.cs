// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestAPI.Contexts;

#nullable disable

namespace QuestAPI.Migrations
{
    [DbContext(typeof(QuestContext))]
    [Migration("20240512002631_CriacaoTabelasQuest")]
    partial class CriacaoTabelasQuest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QuestAPI.Entities.Alternativa", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"), 1L, 1);

                    b.Property<string>("AlternativaCorreta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativaErrada1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativaErrada2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativaErrada3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alternativa");
                });

            modelBuilder.Entity("QuestAPI.Entities.Pergunta", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"), 1L, 1);

                    b.Property<long?>("AlternativaId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("DescPergunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TemaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemaPerguntaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaId");

                    b.HasIndex("TemaId");

                    b.ToTable("Pergunta");
                });

            modelBuilder.Entity("QuestAPI.Entities.Tema", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"), 1L, 1);

                    b.Property<string>("DescTema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tema");
                });

            modelBuilder.Entity("QuestAPI.Entities.Pergunta", b =>
                {
                    b.HasOne("QuestAPI.Entities.Alternativa", "Alternativa")
                        .WithMany()
                        .HasForeignKey("AlternativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestAPI.Entities.Tema", "Tema")
                        .WithMany()
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternativa");

                    b.Navigation("Tema");
                });
#pragma warning restore 612, 618
        }
    }
}
